// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rest_post.proto

#ifndef PROTOBUF_rest_5fpost_2eproto__INCLUDED
#define PROTOBUF_rest_5fpost_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void GZ_MSGS_VISIBLE protobuf_AddDesc_rest_5fpost_2eproto();
void protobuf_AssignDesc_rest_5fpost_2eproto();
void protobuf_ShutdownFile_rest_5fpost_2eproto();

class RestPost;

// ===================================================================

class GZ_MSGS_VISIBLE RestPost : public ::google::protobuf::Message {
 public:
  RestPost();
  virtual ~RestPost();

  RestPost(const RestPost& from);

  inline RestPost& operator=(const RestPost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestPost& default_instance();

  void Swap(RestPost* other);

  // implements Message ----------------------------------------------

  RestPost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RestPost& from);
  void MergeFrom(const RestPost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string route = 2;
  inline bool has_route() const;
  inline void clear_route();
  static const int kRouteFieldNumber = 2;
  inline const ::std::string& route() const;
  inline void set_route(const ::std::string& value);
  inline void set_route(const char* value);
  inline void set_route(const char* value, size_t size);
  inline ::std::string* mutable_route();
  inline ::std::string* release_route();
  inline void set_allocated_route(::std::string* route);

  // required string json = 3;
  inline bool has_json() const;
  inline void clear_json();
  static const int kJsonFieldNumber = 3;
  inline const ::std::string& json() const;
  inline void set_json(const ::std::string& value);
  inline void set_json(const char* value);
  inline void set_json(const char* value, size_t size);
  inline ::std::string* mutable_json();
  inline ::std::string* release_json();
  inline void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.RestPost)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_route();
  inline void clear_has_route();
  inline void set_has_json();
  inline void clear_has_json();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* route_;
  ::std::string* json_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void GZ_MSGS_VISIBLE protobuf_AddDesc_rest_5fpost_2eproto();
  friend void protobuf_AssignDesc_rest_5fpost_2eproto();
  friend void protobuf_ShutdownFile_rest_5fpost_2eproto();

  void InitAsDefaultInstance();
  static RestPost* default_instance_;
};
// ===================================================================


// ===================================================================

// RestPost

// optional uint32 id = 1;
inline bool RestPost::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RestPost::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RestPost::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RestPost::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RestPost::id() const {
  return id_;
}
inline void RestPost::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string route = 2;
inline bool RestPost::has_route() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RestPost::set_has_route() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RestPost::clear_has_route() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RestPost::clear_route() {
  if (route_ != &::google::protobuf::internal::kEmptyString) {
    route_->clear();
  }
  clear_has_route();
}
inline const ::std::string& RestPost::route() const {
  return *route_;
}
inline void RestPost::set_route(const ::std::string& value) {
  set_has_route();
  if (route_ == &::google::protobuf::internal::kEmptyString) {
    route_ = new ::std::string;
  }
  route_->assign(value);
}
inline void RestPost::set_route(const char* value) {
  set_has_route();
  if (route_ == &::google::protobuf::internal::kEmptyString) {
    route_ = new ::std::string;
  }
  route_->assign(value);
}
inline void RestPost::set_route(const char* value, size_t size) {
  set_has_route();
  if (route_ == &::google::protobuf::internal::kEmptyString) {
    route_ = new ::std::string;
  }
  route_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RestPost::mutable_route() {
  set_has_route();
  if (route_ == &::google::protobuf::internal::kEmptyString) {
    route_ = new ::std::string;
  }
  return route_;
}
inline ::std::string* RestPost::release_route() {
  clear_has_route();
  if (route_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = route_;
    route_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RestPost::set_allocated_route(::std::string* route) {
  if (route_ != &::google::protobuf::internal::kEmptyString) {
    delete route_;
  }
  if (route) {
    set_has_route();
    route_ = route;
  } else {
    clear_has_route();
    route_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string json = 3;
inline bool RestPost::has_json() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RestPost::set_has_json() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RestPost::clear_has_json() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RestPost::clear_json() {
  if (json_ != &::google::protobuf::internal::kEmptyString) {
    json_->clear();
  }
  clear_has_json();
}
inline const ::std::string& RestPost::json() const {
  return *json_;
}
inline void RestPost::set_json(const ::std::string& value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  json_->assign(value);
}
inline void RestPost::set_json(const char* value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  json_->assign(value);
}
inline void RestPost::set_json(const char* value, size_t size) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  json_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RestPost::mutable_json() {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  return json_;
}
inline ::std::string* RestPost::release_json() {
  clear_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = json_;
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RestPost::set_allocated_json(::std::string* json) {
  if (json_ != &::google::protobuf::internal::kEmptyString) {
    delete json_;
  }
  if (json) {
    set_has_json();
    json_ = json;
  } else {
    clear_has_json();
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


typedef boost::shared_ptr<gazebo::msgs::RestPost> RestPostPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::RestPost const> ConstRestPostPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rest_5fpost_2eproto__INCLUDED
